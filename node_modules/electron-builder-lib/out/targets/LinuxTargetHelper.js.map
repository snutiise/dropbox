{"version":3,"file":"LinuxTargetHelper.js","sourceRoot":"","sources":["../../src/targets/LinuxTargetHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec, isEmptyOrSpaces, log } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { ExecFileOptions } from \"child_process\"\nimport { outputFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { LinuxConfiguration, LinuxTargetSpecificOptions } from \"..\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { getAppBuilderTool } from \"./tools\"\n\nexport const installPrefix = \"/opt\"\n\nexport interface IconInfo {\n  file: string\n  size: number\n}\n\nexport interface IconListResult {\n  maxIconPath: string\n  readonly icons: Array<IconInfo>\n}\n\nexport class LinuxTargetHelper {\n  private readonly iconPromise = new Lazy(() => this.computeDesktopIcons())\n\n  maxIconPath: string | null = null\n\n  constructor(private packager: LinuxPackager) {\n  }\n\n  get icons(): Promise<Array<IconInfo>> {\n    return this.iconPromise.value\n  }\n\n  // must be name without spaces and other special characters, but not product name used\n  private async computeDesktopIcons(): Promise<Array<IconInfo>> {\n    const packager = this.packager\n    const execOptions: ExecFileOptions = {\n      env: {\n        ...process.env,\n        // icns-to-png creates temp dir amd cannot delete it automatically since result files located in and it is our responsibility remove it after use,\n        // so, we just set TMPDIR to tempDirManager.rootTempDir and tempDirManager in any case will delete rootTempDir on exit\n        TMPDIR: await this.packager.info.tempDirManager.rootTempDir,\n      },\n    }\n\n    async function collectIcons(sourceDir: string) {\n      return JSON.parse(await exec(await getAppBuilderTool(), [\"collect-icons\", \"--source\", sourceDir], execOptions))\n    }\n\n    let iconDir = packager.platformSpecificBuildOptions.icon\n    if (iconDir != null) {\n      const iconDirCandidate = path.resolve(packager.info.buildResourcesDir, iconDir)\n      if (await statOrNull(iconDirCandidate) == null) {\n        iconDir = path.resolve(packager.projectDir, iconDir)\n      }\n      else {\n        iconDir = iconDirCandidate\n      }\n    }\n    else if ((await packager.resourceList).includes(\"icons\")) {\n      iconDir = path.join(packager.info.buildResourcesDir, \"icons\")\n    }\n\n    let result: IconListResult\n    if (iconDir == null) {\n      const icnsPath = await this.getIcns()\n      if (icnsPath == null) {\n        result = await collectIcons(path.join(getTemplatePath(\"linux\"), \"electron-icons\"))\n      }\n      else {\n        result = JSON.parse(await exec(await getAppBuilderTool(), [\"icns-to-png\", \"--input\", icnsPath], execOptions))\n      }\n    }\n    else {\n      result = await collectIcons(iconDir)\n    }\n\n    this.maxIconPath = result.maxIconPath\n    return result.icons\n  }\n\n  private async getIcns(): Promise<string | null> {\n    const build = this.packager.info.config\n    let iconPath = (build.mac || {}).icon || build.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.packager.getDefaultIcon(\"icns\") : path.resolve(this.packager.projectDir, iconPath)\n  }\n\n  getDescription(options: LinuxConfiguration) {\n    return options.description || this.packager.appInfo.description\n  }\n\n  async writeDesktopEntry(targetSpecificOptions: LinuxTargetSpecificOptions, exec?: string, destination?: string | null, extra?: { [key: string]: string; }): Promise<string> {\n    const data = await this.computeDesktopEntry(targetSpecificOptions, exec, extra)\n    const tempFile = destination || await this.packager.getTempFile(`${this.packager.appInfo.productFilename}.desktop`)\n    await outputFile(tempFile, data)\n    return tempFile\n  }\n\n  async computeDesktopEntry(targetSpecificOptions: LinuxTargetSpecificOptions, exec?: string, extra?: { [key: string]: string; }): Promise<string> {\n    if (exec != null && exec.length === 0) {\n      throw new Error(\"Specified exec is empty\")\n    }\n\n    const appInfo = this.packager.appInfo\n\n    const productFilename = appInfo.productFilename\n\n    const desktopMeta: any = {\n      Name: appInfo.productName,\n      Comment: this.getDescription(targetSpecificOptions),\n      Exec: exec == null ? `\"${installPrefix}/${productFilename}/${this.packager.executableName}\" %U` : exec,\n      Terminal: \"false\",\n      Type: \"Application\",\n      Icon: this.packager.executableName,\n      ...extra,\n      ...targetSpecificOptions.desktop,\n    }\n\n    let category = targetSpecificOptions.category\n    if (isEmptyOrSpaces(category)) {\n      const macCategory = (this.packager.config.mac || {}).category\n      if (macCategory != null) {\n        category = macToLinuxCategory[macCategory]\n      }\n\n      if (category == null) {\n        // https://github.com/develar/onshape-desktop-shell/issues/48\n        if (macCategory != null) {\n          log.warn({macCategory}, \"cannot map macOS category to Linux. If possible mapping is known for you, please file issue to add it.\")\n        }\n        log.warn({\n          reason: \"linux.category is not set and cannot map from macOS\",\n          docs: \"https://electron.build/configuration/configuration#LinuxBuildOptions-category\",\n        }, \"application Linux category is set to default \\\"Utility\\\"\")\n        category = \"Utility\"\n      }\n    }\n    desktopMeta.Categories = `${category}${category.endsWith(\";\") ? \"\" : \";\"}`\n\n    let data = `[Desktop Entry]`\n    for (const name of Object.keys(desktopMeta)) {\n      const value = desktopMeta[name]\n      data += `\\n${name}=${value}`\n    }\n    data += \"\\n\"\n    return data\n  }\n}\n\nconst macToLinuxCategory: any = {\n  \"public.app-category.graphics-design\": \"Graphics\",\n  \"public.app-category.developer-tools\": \"Development\",\n  \"public.app-category.education\": \"Education\",\n  \"public.app-category.games\": \"Game\",\n  \"public.app-category.video\": \"Video;AudioVideo\",\n  \"public.app-category.utilities\": \"Utility\",\n  \"public.app-category.social-networking\": \"Chat\",\n  \"public.app-category.finance\": \"Finance\",\n}"]}
